-- 리눅스 --
 배치프로그램 - install은 없는상태에서 설치하는거고 배치는 있는상태에서 업그레이드
   //실제로는 윈도우 보다 리눅스나 유닉스로 서비스를 많이함

리눅스 명령어
- 현재 위치 값 확인 : pwd
- 환경 변수 확인 : env
- 현재 위치 또는 다른 위치의 폴더 내용 보기 : ls
- 현재 사용자의 홈 디렉토리 위치 값 : ~

화면에 출력방법  : echo 명령
- 현재 사용자 변수 : echo $USER          //환경변수
- 현재 사용자의 홈디렉토리 : echo $HOME

[root@localhost ~]# echo "사용자"
사용자
[root@localhost ~]# echo "사용자" $user    // 안됨
사용자
[root@localhost ~]# echo "사용자" $USER    // 현재 사용자변수
사용자 root
[root@localhost ~]# echo "사용자" $USER " -> " $HOME
사용자 root  ->  /root

쉘스크립트 
--
변수선언시 띄어쓰기를 안하면 에러
연산을 사용할때에는 띄어쓰기를 해줘야한다.
n이나 N으로 시작하는 모든글자 [nN]
쉘스크립트에서 명령어 영역은 $()로 표현한다. // 명령어를 사용하고싶을때 사용
특수기호는 앞에 \을 붙여줘야한다.
--

user.sh
 echo "사용자 " $USER
 echo "사용자 " $USER " -> " $HOME
sh user.sh로 실행시 결과 (sh실행시 sh 파일이름.sh)
 사용자  root
 사용자  root  ->  /root

쉘스크립트 명령어는 sh파일(쉘스크립트 명령어)위치를 선언해주고
#!/bin/sh
마지막에는 
exit 0으로 종료를 넣어준다.

----------------------
변수는 모두 문자로 인식
read 변수명 : 입력값을 받을 수 있다.
`expr `를 이용하면 연산이 가능
예) `expr 100 + 20 ` , `expr \( 100 + 20 \) / 3 \* 2` 특수기호는 앞에 \을 붙여줘야한다.
파라메터사용 : sh test.sh 값1 값2 값3 (값을 입력받지않고 변수명을 $1 $2 $3으로 설정
                  $0      $1  $2  $3  ( 전체 파라미터 출력 : $*)
----------------------

연산 `expr 연산할것'
 echo 1 + 2 나 echo '1 + '는 안됨
 echo `expr 1 + 2` 됨

연산의 예
 #!/bin.sh
 A=100 			// 변수선언시 띄어쓰기를 안하면 에러
 B=20
 echo `expr $A + $B`     // 연산을 사용할때에는 띄어쓰기를 해줘야한다.
 exit 0
---------------------------
값을 입력받을때 - read 변수이름
 #!bin/sh
 echo "첫번째 값을 입력하세요"
 read A
 echo "두번째 값을 입력하세요"
 read B
 echo `expr $A + $B`
 exit 0
----------------------------
비교자
 =    : 문자열이 같으면 참
 !=   : 문자열이 같지 않으면 참
 -n   : 문자열이 null이 아니면 참
 -z   : 문자열이 null이면 참
 -eq[=]  : 두 수식이 같으면 참
 -ne[!=] : 두 수식이 같지 않으면 참
 -gt[>]  : 두 수식이 크다면 참          //a -gt b a를 기준으로
 -ge[>=] : 두 수식이 크거나 같으면 참
 -lt[<]  : 두 수식이 작으면 참
 -le[<=] : 두 수식이 작거나 같으면 참

예제)
1)
if [ "text" != "text" ]
 then
  echo "거 짓"
 else
  echo "진 실"
fi

2)
if [ 100 -eq 200 ]
 then
  echo "100과 200은 같다"
 else
  echo "100과 200은 다르다"
fi
3)
if [ 100 -gt $1 ]
 then echo "입력한 값이 작아요"
 else echo "입력한 값이 크다"
fi

파일부분 비교
-e 파일이름 : 파일이 존재하면 참

-d 파일이름 : 파일이 디렉터리면 참
-f 파일이름 : 파일이 일반 파일이면 참

-s 파일이름 : 파일크기가 0이 아니면 참

-u 파일이름 : 파일에 set-user-id가 설정되면 참
-g 파일이름 : 파일에 set-group-id가 설정되면 참

-r 파일이름 : 파일이 읽기 가능이면 참
-w 파일이름 : 파일이 쓰기 가능 상태이면 참
-x 파일이름 : 파일이 실행 가능 상태이면 참
예)
/root/apache-tomcat-8.5.29/bin
-------------------------------------------
case문 사용하기 : 자바의 스위치 케이스문이랑 비슷한것같음

ex)
case $1 in
 start)
  echo "시작";;
 stop)
  echo "정 지";;
 restart)
  echo "다시 시작";;
 *)
  echo "명령어가 실행불가";;
esac
------------------------------------------
ex2)
read value
case $value in
 yes | y | Yes | YES | Y)
  echo "답변 : 내용 확인했어요";;
 [nN]*)				!!!!!!!!!!!  n이나 N으로 시작하는 모든글자 [nN]
  echo "다른 입력값일때 내용";;
 *)
  echo "yes 또는 no만 입력하세요.";;
esac


for문 ----------------------

for i in 1 2 3 4 5 6 7 8 9 10
do
   echo $i
done
ex)
num=0                            //변수에 값을넣을때 붙여써야한다.
for i in 1 2 3 4 5 6 7 8 9 10
do
   num=`expr $num + $i`
done
echo "전체값은 :" $num

쉘스크립트에서 명령어 영역은 $()로 표현한다. // 명령어를 사용하고싶을때 사용
for fileName in $(ls *.sh)
do
  echo $fileName
done

while문 ----------------------
- [ 1 ], [ : ] 무한 루프

ex)
i=0
while [ 10 -gt $i ]
do
i=`expr $i + 1`
done
echo $i

ex)
echo "비밀 번호를 입력하세요"
read pw
while [ "1234" != $pw  ]
do
 echo "비밀번호를 다시 입력해주세요"
 read pw				//같은 변수를 while문안에서 재정의 해서 사용가능하다.
done
echo "환영합니다"

eval -------------------
- 문자열을 실행하는 기능

python 가능