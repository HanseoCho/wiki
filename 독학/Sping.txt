1. 스프링이란 
(초보웹 개발자를 위한 스프링4 프로그래밍 입문 ,재미있는 설명 : http://egloos.zum.com/springmvc/v/487497, 참고 : https://www.inflearn.com/course/%EC%9E%90%EB%B0%94-%EC%8A%A4%ED%94%84%EB%A7%81-%EA%B0%95%EC%A2%8C/?subscribe) 
    - 의존주입(DI) 지원
    - AOP 지원
    - MVC 웹 프레임워크 제공
    - JDBC, JPA 연동 기술 및 선언적 트랜잭션 처리 등 DB연동 지원

    * 자주사용되는 스프링 프로젝트 (http://spring.io)
        - 스프링 데이터 : 적은양의 코드로 데이터 연동 처리를 도와주는 프레임워크.
                         JPA, 몽고DB, 레디스 등 다양한 저장소 기술을 지원
        - 스프링 시큐리티 : 인증/인가와 관련된 프레이워크로 웹 접근제어, 객체 접근제어, DB ● 오픈 ID ● LDAP 등 다양한 인증방식, 암호화 기능제공
        - 스프링 배치 : 로깅/추적, 작업통계, 실패처리 등 배치처리에 필요한 기본기능과 웹기반관리 화면을 제공

    *  MVC패턴이란?  (잘정리된곳 : http://hsp1116.tistory.com/9)
        - model(서비스클래스 or 자바빈) : 비즈니스 로직을 처리하는 모든것들이 모델에 속한다.
                                        특정로직에 대한 처리요청이 들어오면 이를 수행하고 수행 결과를 컨트롤러에 반환,
                                        필요한 정보는 request객체나 session객체에 저장하기도 한다.

        - view(JSP) : 클라이언트에 출력되는 화면, 요청결과의 출력뿐만 아니라 컨트롤러에 요청을 보내는 요도로 사용,
                      request객체나 session객체에 저장된 정보를 토대로 화면에 출력
        - Controller : 전체적인 흐름을 제어하고, 웹브라우저에서 요청이 들어오면 어떤 요청인지 분석해서 이 요청을 처리하기 위한 모델을 사용하여 처리를   
                       사용한 모델로부터 처리결과를 받으면 추가로 처리하거나 가공해야할 정보가 있다면 처리후 request객체나 session객체에 저장하고
                       뷰를 선택하여 foward나 redirect하여 클라이언트에 출력

        모델 1구조 : 웹브라우저의 요청을 JSP페이지가 받아서 서비스클래스나 자바빈을 이용하여 웹브라우저의 요청을 처리하고 그 결과를 출력

        모델 2구조 : JSP페이지와 서블릿, 그리고 로직을 위한 클래스가 나뉘어 브라우저 요청을 처리, 
                    구성요소 : 서블릿, JSP, 자바빈 혹은 클래스
                    - 요청이 들어오면 요청에대한 로직처리는 이를 처리할 모델인 서비스나 자바빈에서 담당하고, 요청 결과는 유저에게 결과를 보여줄 뷰단인 JSP에 출력,
                      이를 위한 모든 흐름제어는 컨트롤러인 서블릿에서 담당




2. 기본예제 만들기
    1) Greeter.java
        public class Greeter {
            private String format;
            public String greet (String guest) {
                return String.format(format, guest);
            }
            public void setFormat(String format) {
                this.format = format;
            }
        }    
    2) applicationContext.xml
        <?xml version="1.0" encoding="UTF-8"?>
        <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd">
            //내용부분은 이 안쪽
            <bean id="greeter" class="spring_work.Greeter">
            //id: 빈객체를 구분할때 사용할 id
            //class : 빈 객체를 생성할 때 사용할 클래스 (경로명같음 ㅇㅅㅇ)
                <property name="format" value="%s, 안녕하세요!"/>
            </bean>	
            <bean id="greeter1" class="spring_work.Greeter">
                <property name="format" value="%s, 안녕하세욥!!"/>
            </bean>		
        </beans>        
        * ☆☆☆ 스프링은 객체를 생성하고 초기화하는 기능을 제공하는데, id class부분이 그 부분이다.
          이렇게 생성되는 객체는 빈(Bean)객체라 부르고 이 객체에 대한 정보는 bean태그에 담겨있다.
    3) Main.java
		GenericXmlApplicationContext ctx = new GenericXmlApplicationContext("classpath:applicationContext.xml");
		//applicationContext.xml에 정의한 <bean> 설정정보를 읽어와 내부적으로 Greeter 객체를 생성하고 초기화
		Greeter g = ctx.getBean("greeter",Greeter.class);
		//getBean() 메서드는 GenericXmlApplicationContext에서 읽어와 생성한 빈객체를 검색할때 사용. getBean(bean태그 id속성, 검색할 빈 객체의 타입(Greeter인 빈을 설정했으므로))
		String msg = g.greet("스프링");
		System.out.println(msg);
		ctx.close();	        

    * 실제 스프링은 XML 설정 파일을 읽어온 뒤에 자바의 리플렉션 기능을 이용해서 객체를 생성하고 set메서드를 실행
        (리플렉션 : 구체적인 클래스 타입을 알지못해도 그 클레스의 메소드, 타입, 변수들을 접근할 수 있도록 하는 API)

3. 컨테이너 : ApplicationCotnext는 빈 객체의 생성, 초기화, 보관, 제거 등을 관리해서 컨테이너라 부름
    (참고 : http://limmmee.tistory.com/13)
    스프링 컨테이너 최하위 계층3개
    - GenericXmlApplicationContext : XML로부터 객체 설정 정보를 가져온다.
    - AnnotationConfigApplicationContext : 자바 애노테이션을 이용한 클래스로부터 객체 설정 정보를 가져온다.
    - GenericGroovyApplicationContext : 그루비 코드를 이용해 설정 정보를 가져온다.

    1. 싱글톤 객체 : 스프링은 별도 설정을 하지않을경우 한 개의 빈객체만을 생성하며, 이들 빈 객체들이 싱글톤 범위를 갖는다고 표현
    뒤에 프로토타입 범위도 존재

4. 의존(DI) : 의존주입, 한 클래스가 다른클래스의 메서드를 실행할때 의존한다고 표현, 
            ( A클래스가 B클래스 메서드 실행시, A클래스는 B클래스에 의존한다고 표현할수 있다.)
            * 의존은 변경에 의해 영향을 받는 관계를 의미, B클래스의 메소드 이름변경시 A클래스 소스코드도 함께 변경되는데 이런 변경에 따른 영향이 전파되는 관계를 '의존'한다고 표현
            
            1) 의존 대상 객체를 직접 생성 : A클래스에 직접 B클스의 객체 생성
                public class A(){
                    private MemberDao maemberDao = new MemberDao();
                }
                A svc = new A(); //  의존하는 MemberDao의 객체도 같이 생성
                - 클래스 내부에 직접 의존 객체를 생성하는것이 쉽지만, 유비보수 관점에서 문제점을 유발할 수 있다.

            2) DI를 통한 의존 처리 : 의존하는 객체를 직접 생성하지 않고 의존 객체를 전달받는 방식을 사용
                public class A(){
                    private MemberDao memberDao;
                    
                    public A_s(MemberDao memberDao){
                        this.memberDao = memberDao;
                    }
                }
                - 1번 방식과 다른점은 의존 객체를 직접 생성하지 않고, 생성자를 통해서 의존 객체를 전달받는다.
                  생성자를 통해 A_s가 의존하고 있는 MemberDao객체를 주입 받은 것이다. 
                  즉, 의존 객체를 직접 구하지 않고 생성자를 통해서 전달받기 때문에, 이 코드는 DI(의존주입)패턴을 따르고 있다.
                

                - DI와 의존 객체 변경의 유연함)
                    - 각각 객체가 생성된 경우 객체가 수정되면 모두 수정해줘야 하는데, 
                      의존 주입을 할경우에는 객체를 생성하는 코드 한곳만 수정하면 된다.

                * DBMS에서 데이터를 읽어오는데 10밀리초 가 걸린다면 메모리에 있는 데이터에 접근할 때에는 1밀리 초도 안걸린다.
                  이런 특징을 살려 DB에 있는 데이터 중 자주 사용되는 데이터를 메모리와 같이 빠르게 접근할 수 있는 저장소에 보관해 조회속도를 향상시키는 기법을 캐시라 한다.

5. 객체조립기 : 객체를 생성하고 의존 객체를 주입해주는 기능과 특정 객체를 필요로 하는곳에 객체를 제공하는 클래스
               4_2번처럼 메인에서 처리한느것도 나쁘지 않지만 더 좋은 방법은 객체를 생성하고 의존 객체를 주입해주는 클래스를 따로 작성하는 것이다.
               의존 객체를 주입한다는 것은 서롣 다른 두객체를 조립해준다고 생각할수 있어서 이러한 클래스를 조립기라고도 한다.

   *예외처리 샘플) spring_work2 확인 : 구조가 객체조립기를 이용해서 리모콘클래스에서 a객체를 b클래스 c클래스에 주입해주고 리모콘클래스에서 b클래스 c클래스를 가져와서 사용

6. 스프링의 DI 설정 : 스프링에서는 5번의 객체조립기와 동일한 기능을 제공,
                    스프링은 객체를 제공하는 기능을 정의하고 있다.
                    스프링과 객체조립기를 사용한것의 차이점은 객체조립기는 특정타입의 클래스만 생성할 수 있지만 스프링은 범용적으로 사용할수 있는 조립기이다(???)
    
    1) 스프링을 이용한 객체조립과 사용 : 
        <?xml version="1.0" encoding="UTF-8"?>
        <beans xmlns="http://www.springframework.org/schema/beans"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd">
            
            <bean id="memberDao" class="spring_work3.MemberDao">
            </bean>
            
            <bean id="memberRegSvc" class="spring_work3.MemberRegisterService">
                <constructor-arg ref="memberDao" />             //constructor-arg 를 사용해서 넣어준다.
            </bean>
            
            <bean id="changePwdSvc" class="spring_work3.ChangePasswordService">
                <constructor-arg ref="memberDao" />
            </bean>
                    
        <beans>                    


7. 의존자동주입 : 애노테이션을 활용, 최범균개발자님은 선호하진않지만 부득이하게 사용하는 기능중 하나라 함
    - 자동주입기능을 사용하면 스프링이 알아서 의존 객체를 찾아서 주입해준다. 
    기존의 방식을
        <bean id="memberDao" class="spring.MemberDao"> 
        </bean>
        <bean id="memberRegSvc" class="spring.MemerRegisterService">
            <constructor-arg ref="memberDao"/>
        </bean>
    이노테이션을 사용하면 이렇게만 사용해도 된다.
        <bean id="memberDao" class="spring.MemberDao">
        </bean>
        <bean id="memberRegSvc" class="spring.MemberRegisterService">
        </bean

    사용방법)
        1) 자동 주입대상에 @Autowired 애노테이션 사용
        2) XML 설정에 <context:annotation-config /> 설정 추가
        

    
8. 인터셉터 : 로그인하지 않은상태에서 비밀번호 변경 폼을 요청시 로그인 화면으로 이동(세션이나 쿠키등을 이용해 확인)
    1) 사용방법
        Spring-controller.xml에 추가
        <mvc:interceptors>                                           // 여러 HandlerInterceptor를 설정
            <mvc:interceptor>                                        // 한 개의 HandlerInterceptor를 설정, 중첩된 <bean태그를 사용해서 HandlerInterceptor로 사용할 객체를 지정
                <mvc:mapping path="/edit" />                         // HandlerIntterceptor를 적용할 경로를 지정, 
                <bean class="interceptor.AuthCheckInterceptor" />
            </mvc:interceptor>
        </mvc:interceptors>


★★★★  * 스프링 xml파일속성 (참고 : http://noritersand.tistory.com/152)
            1. benas : 스프링 컨테이너가 사용할 환경설정 정보를 담고있는 xml파일의 루트태그이며, 태그의 속성으로 스프링이 사용할 라이브러리를 정의
                    beans의 속성값은 실제 참조하는 스프링 라이브러리 버전에 따라 달라진다.
            2. bean : 객체 생성태그, id : 스프링 bean이 인식할 식별자, class : 객체를 생성할 클래스 (패키지명부터해서 해당 클래스까지)
            3. constructor-arg : 생성자의 가변인자에 값을 할당. 두개 있을경우 두번사용
                - value : 원시 데이터타입(int,long)나 래퍼타입(Integer,Long) 혹은 String 타입의 값을 할당할때 사용
                - ref : 참조값을 할당할때 사용하는 속성, 여기서 참조값이란 bean으로 생성한 객체의 아이디를 의미
                - type : 할당하는 값의 타입을 명시하는 속성
            4. property : 필드,클래스 변수나 인스턴스 변수를 의미하며 setter 메서드를 이용해 값을 할당한다. 따라서 setter메서드가 없으면 사용할 수 없다.
                * : setMethodName 으로 set뒤의 대문자 메소드이름부터 property name으로 인식한다.
                Syntex 1: body가 있는 경우
                <bean id="아이디" class="클래스">
                    <property name="메소드명">
                        <value type="클래스_타입">값</value
                        <ref bean="참조값"/>
                    </property>
                </bean>
                Syntex 2: body가 없는 경우
                <bean id="아이디" class="클래스">
                    <property name="변수명" value="값"/>
                    <property name="변수명" ref="참조값"/>
                </bean>
            5. p 네임스페이스 : 기존의 구문을 축약하여 작성, 기존의 긴코드를 줄일수있다. (<bean id="아이디" class="클래스" p:변수명="값" p:변수명-ref="참조값"/>)
                <!-- p 네임스페이스를 이용한 프로퍼티 설정 -->
                <bean id="user2" class="com.sp2.UserImpl" p:name="자바" p:tel="010-1111-1111"/>

                <!-- p 네임스페이스를 이용한 의존관계설정 -->
                <bean id="userService2" class="com.sp2.UserService" p:user-ref="user2"/>
            6. list : Arraylist에 대응 된다.
                <bean id="아이디" class="클래스">
                    <property name="변수명">
                        <list>
                            <value>첫번째 값</value>
                            <value>두번째 값</value>
                            ...
                        </list>
                    </property>
                </bean>            
            7. map : HashMap에 대응
                Syntex 1:
                <bean id="아이디" class="클래스">
                    <property name="address">
                        <map>
                            <entry>
                                <key><value>키</value></key>
                                <value>벨류</value>
                            </entry>
                        </map>
                    </property>
                </bean>
                Syntex 2:
                <bean id="아이디" class="클래스">
                    <property name="address">
                        <map>
                            <entry key="값_키" value="값_벨류"/>
                            <entry key-ref="참조값_키" value-ref="참조값_벨류"/>
                        </map>
                    </property>
                </bean>
            8. props : property에 대응되는 문법은 map과 같다.
                <bean id="handlerMapping" class="servlet.handler.SimpleUrlHandlerMapping">
                    <property name="mappings">
                        <props>
                            <prop key="/bbs/*.action">bbs.boardController</prop>
                        </props>
                    </property>
                </bean>                

    
            * 
        
    

    ★★★★ 어노테이션 정리) (참고(그냥 가져옴 여기 좋다) : http://noritersand.tistory.com/156) 
            1) @Component : <context:component-scan> 태그를 설정파일에 추가하면 해당 어노테이션이 적용된 클래스를 빈으로 등록,
                            범위는 디폴트로 singleton이며 @Scope를 사용하여 지정
                            사용하려면 XML 설정파일에 <context:component-scan>을 정의하고 적용할 기본  패키지를 base-package 속성으로 등록한다.

                            context:annotation-config 태그는 어노테이션과 관련해서 다음의 BeanPostProcessor를 함께 등록 한다.
                                - @Required(RequiedAnnotationBeanPostProcessor)
                                - @Autowired(AutowiredAnnotationBeanPostProcessor)
                                - @Resource, @PostConstruct, @PreDestory(CommonAnnotationBeanPostProcessor)
                                - @Configuration(ConfigurationClassPostProcessor)
                                - 그 외 Repository, Service, Controller 포함   

                            예를 들어 다음처럼 설정하면:
                                <context:component-scan base-package="xxx"/>
                            xxx 패키지 하위에 @Component로 선언된 클래스를 bean으로 자동 등록한다. bean의 이름은 해당 클래스명(첫글자는 소문자)이 사용된다.

                            <context:component-scan /> 요소에는 scoped-proxy 속성이 존재 한다. scoped-proxy는 <aop:scoped-poxy/>처럼 WebApplicationContext 에서만 
                            유효하며 "session", "globalSession", "request" 이외의 scope는 무시 되며 아래의 3가지 값을 설정 할 수 있다.

                            no: proxy를 생성하지 않는다.(기본값)
                            interfaces: JDK Dynamic Proxy를 이용한 Proxy 생성
                            targetClass: 클래스에 대해 프록시를 생성(CGLIB를 이용한 Proxy 생성)                            
                                @Component
                                @Scope("prototype")   // 생략하면 싱글톤
                                public class Test {
                                    .....
                                }
                            
                            CGLIB : 기존의 자바 클래스파일로부터 자바의 소스코드를 동적으로 생성하는 라이브러리(자바 소스 변경) (참고 : http://sourceforge.net/projects/cglib/)

                            스캔 대상 클래스 범위 지정하기)
                                <context:include-filter> 태그와 <context:exclude-filter> 태그를 사용하면 자동 스캔 대상에 포함시킬 클래스와 
                                포함시키지 않을 클래스를 구체적으로 명시할 수 있다.
                                    <context:component-scan base-package="spring.demo" scoped-proxy="no">
                                    <context:include-filter type="regex" expression="*HibernateRepository"/>
                                    <context:exclude-filter type="aspectj" expression="..*IBatisRepository"/>
                                    </context:component-scan>                                    
                                위와 같이 <context:include-filter> 태그와 <context:exclude-filter> 태그는 각각 type 속성과 expresseion 속성을 갖는데, 
                                type 속성에 따라 expression 속성에 올 수 있는 값이 달라진다. type 속성에 입력가능한 값은 다음과 같다:
                                - annotation: 클랙스에 지정한 어노테이션이 적용됐는지의 여부. expression 속성에서는 "org.example.SomeAnnotation"와 같은 어노테이션 이름을 입력한다.
                                - assignable: 클래스가 지정한 타입으로 할당 가능한지의 여부.  expression 속성에는 "org.exampleSomeClass" 와 같은 타입 이름을 입력한다.
                                - regex: 클래스 이름이 정규 표현식에 매칭되는 지의 여부.  expression 속성에는 "org\.example\.Default.*" 와 같이 정규표현식을 입력한다.
                                - aspectj: 클래스 이름이 AspectJ 의 표현식에 매칭되는 지의 여부.  expression 속성에는 "org.example..*Service+" 와 같이 AspectJ 의 표현식을 입력한다.                                
                            
            2) @Required : Required 어노테이션은 필수 프로퍼티임을 명시하는 것으로 필수 프로퍼티를 설정하지 않을 경우 빈 생성시 예외를 발생시킨다.
                            사용방법)
                                1) 자바에서 필수로 설정하지않으면 예외처리할 프로퍼티 앞에 작성한다.
                                    import org.springframework.beans.factory.annotation.Required
                                    public class TestBean {
                                        @Required
                                        private TestDao testDao;

                                        public void setTestDao(TestDao testDao) {
                                            this.testDao = testDao;
                                        }
                                    }      

                                2) xml에는 testDao에 필수로 넣어준다.
                                    <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanpostProcessor"/>
                                    <bean name="testBean"  class="han.test.TestBean">
                                        <property name="testDao" ref="testDao"/>
                                        <!-- @Required 어노테이션을 적용하였으므로 설정하지 않으면 예외를 발생시킨다. -->
                                    </bean>                                

                                *RequiredAnnotationBeanPostProcessor 클래스는 스프링 컨테이너에 등록된 bean 객체를 조사하여 @Required 어노테이션으로 
                                 설정되어 있는 프로퍼티의 값이 설정되어 있는지 검사한다.
                                *사용하려면 <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor" /> 
                                 클래스를 빈으로 등록시켜줘야 하지만 이를 대신하여 <context:annotation-config> 태그를 사용해도 된다:
                                    <beans ...>
                                        <context:annotation-config/>
                                    </beans>                                 
                                
            3) @Autowired : 의존관계를 자동설정할 때 사용하며 타입을 이용하여 의존하는 객체를 삽입해 준다. 
                            그러므로 해당 타입의 빈객체가 존재하지 않거나 또는 2개 이상 존재할 경우 스프링은 예외를 발생시키게 된다.

                            option - required : Autowired어노테이션을 적용한 프로퍼티 중 반드시 설정할 필요가 없는 경우에 false값을 주어 프로퍼티가 존재하지 않더라도
                                                스프링이 예외를 발생하지 않도록 한다. 기본값은 True ex) @Autowired(required=false)

                            사용하려면 <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" /> 클래스를 빈으로 등록시켜줘야 한다. 
                            해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
                            
                            @Autowired를 적용할 때 같은 타입의 빈이 2개 이상 존재하게 되면 예외가 발생하는데, Autowired도 이러한 문제가 발생한다.
                             이럴 때 @Qualifier를 사용하면 동일한 타입의 빈 중 특정 빈을 사용하도록 하여 문제를 해결할 수 있다.
                                @Autowired
                                @Qualifier("test")
                                private Test test;                             
            
            4) @Qualifier : @Autowired와 함께사용된다, @Autowired의 목적에서 동일 타입의 빈객체가 존재시 특정빈을 삽입할 수 있게 설정
                            @Qualifier("mainBean")의 형태로 @Autowired와 같이 사용하며 해당 <bean>태그에 <qualifire value="mainBean" /> 태그를 선언해주어야 한다. 
                            메서드에서 두개이상의 파라미터를 사용할 경우는 파라미터 앞에 선언해야한다.

                            option - name : alias명

                            사용하려면 동일타입의 빈객체 설정에서 <qualifier value="[alias명]" />를 추가해 준다.
                            xml)
                                <bean id="user2" class="com.sp4.UserImpl">
                                    <property name="name" value="스프링"/>
                                    <property name="age" value="20"/>
                                    <property name="tel" value="000-0000-0000"/>
                                </bean>

                                <bean id="userService1" class="com.sp4.UserService"/>
                            자바)
                                public class UserService {
                                    @Autowired
                                    @Qualifier("user2")
                                    private User user;

                                    public String result() {
                                        return user.getData();
                                    }
                                }                            

            5) @Resource : 자바 6 및 JEE5에 추가된 것으로 어플리케이션에서 필요로 하는 자원을 자동 연결할 때 사용 한다. 
                           스프링 2.5 부터 지원하는 어노테이션으로 스프링에서는 의존하는 빈 객체를 전달할 때 사용한다.
                           
                           @Autowired와 흡사하지만 @Autowired는 타입으로(by type), @Resource는 이름으로(by name)으로 연결한다는 점이 다르다.

                           options - name: 자동으로 연결될 빈객체의 이름을 입력한다. ex) @Resource(name="testDao")
                           
                            xml)
                                <beans>
                                    <!-- 기타 설정 생략 -->
                                    <context:annotation-config/>

                                    <bean id="user2" class="com.test.UserImpl" p:data="65536"/>
                                </beans>                           
                            
                            java)
                                public class UserService {
                                    @Resource(name="user2")
                                    private User user;
                                    public void setUser(User user) {
                                        this.user = user;
                                    }
                                    public String result() {
                                        return user.getData();
                                    }
                                }                            

            6) @Scope : 스프링은 기본적으로 빈의 범위를 "singleton" 으로 설정한다. 
                        "singleton" 이 아닌 다른범위를 지정하고 싶다면 @Scope 어노테이션을 이용하여 범위를 지정한다.
                        설정: prototype, singleton, request, session, globalSession
                        사용방법)
                            @Component
                            @Scope(value="prototype")
                            public class Worker {}            

            7) @PostConstruct : 의존하는 객체를 설정한 이후에 초기화 작업을 수행하기 위해 사용, 프링에 의해 인스턴스가 생성된 후 어노테이션이 적용된 메서드가 호출
                                ex)
                                    @PostConstruct
                                    public void init() {
                                        System.out.println("객체 생성 후 내가 먼저 실행된다.");
                                    }                                

            8) @PreDestroy : 컨테이너에서 객체를 제거하기 전에 해야할 작업을 수행하기 위해 사용한다.

            9) @Inject : 특정 Framework에 종속되지 않은 어플리케이션을 구성하기 위해서는 @Inject를 사용할 것을 권장한다. 
                         @Inject를 사용하기 위해서는 클래스 패스 내에 JSR-330 라이브러리인 javax.inject-x.x.x.jar 파일이 추가되어야 함에 유의해야 한다. 
            
            10) @Service : @Service를 적용한 Class는 비지니스 로직이 들어가는 Service로 등록

            나머지는 참고 : http://noritersand.tistory.com/156  나중에 옮겨 적자

        
            