19. @PathVariable : 주소값으로 온거 변수로 받기
    @Controller
    public class Board2Controller {
        @RequestMapping("/board/{type}") // board/{변수} : 변수로 들어오는값을 type으로 받는다.
        public void board(@PathVariable("type") String type) { //@PathVariable(타입) 변수 으로 매칭해서 뒤에있는 변수에 넣어준다.
            System.out.println(type);
        }
    }

20. 스프링을 이요한 작업은 2가지 방식으로 나뉘는대
    1.  class에 RequestMapping을 직접주고 메소드에도 RequestMapping으로 직접지정을해서 하드코딩으로 각각 풀어서 쓰는방법과
        @Controller
        @RequestMapping("/board")
        public class BoardController {
            
            @Autowired
            BoardServiceInterface bsi; // BoardService 사용 할 수 있도록 주입 받기.
            
            HashMap<String, Object> param;  // model로 사용할 전역 변수 선언
            
            @RequestMapping("/selectList")
            public String selectList(Model model) {
        //		model.addAttribute("data",bsi.selectList());
                return "boardList"; // jsp 화면 출력
            }
            
            @RequestMapping("/selectOne")
            public String selectOne(Model model, HttpServletRequest req) {
                model.addAttribute("data",bsi.selectOne(getParamMap(req)));		
                return "boardOne"; // jsp 화면 출력
            }
            
            @RequestMapping("/insert")
            public String insert(Model model, HttpServletRequest req) {
                model.addAttribute("data",bsi.insert(getParamMap(req)));		
                return "redirect:selectList"; // selectList에게 기능 전달
            }
            
            @RequestMapping("/updateView")
            public String updateView(Model model, HttpServletRequest req) {
                model.addAttribute("data",bsi.selectOne(getParamMap(req)));		
                return "updateView"; // jsp 화면 출력
            }
            
            @RequestMapping("/update")
            public String update(Model model, HttpServletRequest req) {
                model.addAttribute("data",bsi.update(getParamMap(req)));
                return "redirect:selectList"; // selectList에게 기능 전달
            }
            
            @RequestMapping("/delete")
            public String delete(Model model, HttpServletRequest req) {
                model.addAttribute("data",bsi.delete(getParamMap(req)));		
                return "redirect:selectList"; // selectList에게 기능 전달
            }
            
            public HashMap<String, Object> getParamMap(HttpServletRequest req){
                HashMap<String, Object> result = new HashMap<String, Object>();
                
                Enumeration<?> enums = req.getParameterNames();
                while(enums.hasMoreElements()) {
                    String paramName = enums.nextElement().toString();
                    result.put(paramName, req.getParameter(paramName));
                }
                
                return result;
            }
        }

    2. @PathVariable를 이용해서 RequestMapping으로 받는값을 변수로 받아서 if문을 이용해 구별하는법
        public class Board2Controller {
            @Autowired
            BoardServiceInterface bsi;
            HashMap<String, Object> param;  // model로 사용할 전역 변수 선언
            @RequestMapping("/board/{type}") //변수로 들어오는값을 type으로 받는다.
            public String board(@PathVariable("type") String type,Model model,HttpServletRequest req) { //@PathVariable(타입) 변수 으로 매칭해서 뒤에있는 변수에 넣어준다.
                System.out.println(type);
                    
                if("selectList".equals(type)) {
                    model.addAttribute("data",bsi.selectList());
                    return "boardList";
                }
                else if("selectOne".equals(type)) {
                    model.addAttribute("data",bsi.selectOne(getParamMap(req)));
                    return "boardOne";
                }
                else if("insert".equals(type)) {
                    model.addAttribute("data",bsi.insert(getParamMap(req)));
                    return "redirect:selectList";
                }
                else if("updateView".equals(type)) {
                    model.addAttribute("data",bsi.selectOne(getParamMap(req)));
                    return "updateView";
                }
                else if("update".equals(type)) {
                    model.addAttribute("data",bsi.update(getParamMap(req)));
                    return "redirect:selectList";
                }
                else if("delete".equals(type)) {
                    model.addAttribute("data",bsi.delete(getParamMap(req)));
                    return "redirect:selectList";
                }
                return "";
            }
            
            public HashMap<String, Object> getParamMap(HttpServletRequest req){
                HashMap<String, Object> result = new HashMap<String, Object>();
                
                Enumeration<?> enums = req.getParameterNames();
                while(enums.hasMoreElements()) {
                    String paramName = enums.nextElement().toString();
                    result.put(paramName, req.getParameter(paramName));
                }
                
                return result;
            }
        }
    
    * 클래스에도 RequestMapping으로 1차적인 url을 거를수 있고, 메소드에도 RequestMapping을 사용함으로서 2차적인 주소값을 사용할수있다.
      2번방법을 사용하면 클래스 하나에 작업해도 1번으로는 여러클래스를 구분한거랑 비슷하다.(그냥 스타일 차이인듯)
        ** 두가지 다 그냥 한번에 받을수있네요..) 
        @RequestMapping("/{menu}/{type}")
        public ModelAndView board(@PathVariable("menu") String menu,@PathVariable("type") String type, Model model, HttpServletRequest req) {
            return bsi.board(type, req, model);
        }
    

21. ModelAndView타입 : 모델과 뷰를 한곳으로 사용할수 있다.
    ModelAndView mav;
    mav = new ModelAndView();
    mav.setViewName("boardList");               //보여줄 view이름을 설정하고 리턴해주면 알아서 리턴됨
    mav.addObject("data", bdl.board(param));    //기존의 model.addAttribute로 넘겨주던 화면값을 넘겨줄수있다.








Jquery를 이용


22. https://mvnrepository.com/ jquery받기 -> pom에 적용하면
    maven dependencis 밑에 http가 webjars로 들어온경우추가하고
    <resources mapping="/webjars/**" location="/webjars/" />
    -> 그리고 jquery를 사용할 곳에서
    <script src="/test/webjars/jquery/3.3.1/dist/jquery.min.js">
    추가해주는데 이거는 maven Dependencies에의 jquery의 resources안쪽 경로이다

23. json으로 바꿔주는 라이브러리 
    <!-- https://mvnrepository.com/artifact/net.sf.json-lib/json-lib -->
    <dependency>
        <groupId>net.sf.json-lib</groupId>
        <artifactId>json-lib</artifactId>
        <version>2.4</version>
    </dependency>
    오류발생시
    <!-- https://mvnrepository.com/artifact/net.sf.json-lib/json-lib -->
		<dependency>
		    <groupId>net.sf.json-lib</groupId>
		    <artifactId>json-lib</artifactId>
		    <version>2.4</version>
		    <classifier>jdk15</classifier>
		</dependency>

    1. jsp에서 가져오기
    java)
        @Controller
        public class JsonControl {
            @RequestMapping("/json")
            public String getJson(Model model) {
                HashMap<String, Object> map = new HashMap<String, Object>();
                map.put("key","value");
                
                JSONObject j = new JSONObject();
                j = JSONObject.fromObject(JSONSerializer.toJSON(map));
                
                model.addAttribute("json",j);
                model.addAttribute("map",map);
                return "json";
            }
        }    	
    json.jsp)
        <%@ page language="java" contentType="text/html; charset=UTF-8"
            pageEncoding="UTF-8"%>
        <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
        <%@ page session="false" %>
        ${json}    

    jqeury)
        <script>
            $(document).ready(function(){
                console.log("ready");
                $.ajax({url:"/test/json"}.done(function(data){
                    var d = JSON.parse(data);
                    console.log(data);
                });	
            });
        </script>    
    * 사용하는 이유는 js에서 사용할떄 map형식으로 보내면 사용할수 없기떄문이다.
 
    2. jquery로 요청해서 json 가져오기
    http)
        <script type="text/javascript" src="/test/webjars/jquery/3.3.1/dist/jquery.min.js"></script>
        <script>
            $(document).ready(function(){
                console.log("ready()");
                $.ajax({url: "/test/json2"})
                .done(function(data) {
                    var d = JSON.parse(data)
                        console.log(d.key);
                });
            });
        </script>    

    JsonControl.java)
        @RequestMapping("/json2")
        public void getJson2(HttpServletResponse req) {
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("key", "value");
            JSONObject j = new JSONObject();
            j = JSONObject.fromObject(JSONSerializer.toJSON(map));
            
            try {
                req.getWriter().write(j.toString());
            }
            catch (Exception e) {
                
            }
        }    

    3. 1번과 2번을 메소드화 하기
    JsonControl)
        @RequestMapping("/json")
        public ModelAndView getJson(Model model) {
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("key", "value");
            return HttpUtill.makeJsonView(map);
        }
        
        @RequestMapping("/json2")
        public void getJson2(HttpServletResponse res) {
            HashMap<String, Object> map = new HashMap<String, Object>();
            map.put("key", "value");
            HttpUtill.makeJsonWirter(res,map);
        }    
    
    HttpUtill)
        public static ModelAndView makeJsonView(HashMap<String, Object> map) {
            ModelAndView mav = new ModelAndView();
            JSONObject j = new JSONObject();
            j = JSONObject.fromObject(JSONSerializer.toJSON(map));
            mav.addObject("json",j);
            mav.setViewName("json");
            return mav;
        }
        
        public static void makeJsonWirter(HttpServletResponse res, HashMap<String, Object> map) { 
            JSONObject j = new JSONObject();
            j = JSONObject.fromObject(JSONSerializer.toJSON(map));
            
            try {
                res.getWriter().write(j.toString());
            }
            catch (Exception e) {
            }    	
        }    
    
    4. jquery로 넘어온 값을 사용하기
        <script type="text/javascript" src="/test/webjars/jquery/3.3.1/dist/jquery.min.js"></script>
        <script>
            $(document).ready(function(){
                console.log("ready()");
                $.ajax({url: "/test/json/board/selectList"})
                .done(function(data) {
                    var d = JSON.parse(data);
                    var dd = d.result;
                    for(var i = 0; i <dd.length; i++){
                        $("#list").append("<li>"+ dd[i].title +"</li>")
                    }
                });
            });
        </script>
        <body>
            <h1>hello world</h1>
            <ul id="list"></ul>
        </body>    

    5. jquery로 요청할때 특정값도 함께 넘겨주기
	<script>
		$(function(){
			var boardNo = "${QueryString.boardNo}";
			
			console.log(boardNo);
			$.ajax({url:"/test/json/board/selectOne",data:{"boardNo":boardNo}})
			.done(function(data){
				var d = JSON.parse(data)
				var dd = d.result;
				console.log(dd);
				$("#title").text(dd.title);
				$("#content").text(dd.content);
			});
		});
	</script>
    <body>
        <h1 id="title"></h1>
        <p id="content"></p>
    </body>    