신입 프로그래머를 위한 자바 스프링 (Spring) 프레임워크 강좌
참고 : https://www.inflearn.com/course/%EC%9E%90%EB%B0%94-%EC%8A%A4%ED%94%84%EB%A7%81-%EA%B0%95%EC%A2%8C/?subscribe
빠르게 한번 정리하는용, 하고 책 정독하자
xml 기법

1. 프레임워크 : 특정한 목적에 맞게 프로그래밍을 쉽게하기위한 약속(틀)

2. 스프링 : 자바언어를 기반으로, 다양한 어플리케이션을 만들기위해 만든 프로그래밍 틀
    - 이전에는 EJB고 진입장벅이 있었다.
    - 스프링은 톰캣을 이용할수 있고 코드의 경량화 그리고 개발중에 테스트가 쉽다
    - 자바개발자들의 표준프레임워크
    - 스프링의 기능들은 너무많아서 다 공부하는건 비효율적이다 
    - 프로젝트를 여러개해보면 쓰이는 기술들이 다른데 많이쓰다보면 고수다 된다.
    준비사항 : java, jsp&Servlet, mvc2방식 알고있으면 좋음
    - 업데이트가 되면 그 내용에 대해 꾸준한 학습이 필요
    - 웹어플리케이션은 대부분 스프링이다.

3. 환경설정 하는법 : https://www.inflearn.com/course-status-2/ 

4. DI(객체주입) : setter() or construct()로 넣어줌 

5. IOC컨테이너 : DI를 하는 객체들을 담고있는 컨테이너

6. 스프링 xml로 적용하기
    void main{
        String configLocation = "classpath:applicationCTX.xml"; // xml설정
        AbstractApplicationContext ctx = new AbstractApplicationContext(configLocation); // xml읽어오기
        MyCalculator myCalculator = ctx.getBean("myCalculator",MyCalculator.class); // bean을 가져옴        
    }

    xml
    <bean id="calculator" class="com.javalec.ex.Calculator"/> 
    * id : 유니크값, class : 경로및 클래스파일
    <bean id="myCalculator" class="com.javalec.ex.MyCalculator">
        <property name="calculator">
            <ref bean="calculator"/>
            * 위에서 만든 calculator를 참조 한번에 써도됨
        </property>
        <property name="firstNum" value="10" />
        * name 변수에 값 주입
        <property name="secondNum" value="2" />

    </bean>

* 중간은 다른곳에 정리가 잘되있어서 넘어갈게요

7. 의존관계 : b객체나 c객체를 사용하는 a클래스는 하나밖에 참조 못할때 bean을 이용해서 a클래스가 b객체를 참조했다가 자바에서 a.set메소드로 c객체를 참조하게 만들수 있다.
    * 인터페이스 사용 장점 : 타입을 통일, 강제적으로 오버라이드 작업통일 (작은 프로젝트할떄는 장점이 없지만 큰프로젝트를 할때 파악할수 있다.)
                        ☆☆☆ 인터페이스가 같으면 ctx.getBean("pencil", Pencil.class)할때 인터페이스 클래스로 호출 가능하다.

 - 스프링프레임워크의 장점 : java파일 수정없이 스프링 설정파일만을 수정하여 부품들을 생성/조립할수 있다.

8. DI설정 방법 : 
    1) XML파일을 이용한  DI설정방법 
        *) 가지고올 xml이 두개 이상일때 둘다 넣어준다.
        AbstractApplicationContext ctx = new AbstractApplicationContext(a,b); 
        *) 같은 xml에서 a bean과 b bean이 있는데 메인에서 a bean를 가져오고 b bean은 xml에서 a를 참조할경우 결국 같은곳에서 가져오므로 a 와 b는 같다.
    2) JAVA를 이용한 DI설정방법 
        @configuration : 이 클래스는 스프링 설정에 사용되는 클래스임을 명시
        @bean : 객체 생성
        AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(가져올클래스.class);
        ctx.getBean("student1",가져올클래스.class);
        ctx.getBean("student2",가져올클래스.class);
    3) XML과 JAVA를 같이사용 
        - XML파일을 만들고 그안에 자바를 포함시키는 방법
            xml beans 안쪽에
            <context:annotation-config/> // configuration 어노케이션을 쓴친구를 가져오겠다.
            <bean class="com.javalec.ex.applicationConfig">   // 애가 가져올 녀석이다
        - JAVA파일에 XML파일을 포함시키는 방법
            java @configuration명시한곳 아래에
            @importResource("classpath:applicationCTX")


*. 네임스페이스 : 어떠한 객체를 설정할때 c:이름="값" p:이름="값", c는 constructor-arg p는 property

9. 생명주기와 범위)
    스프링 컨테이너 생명주기
        생성 - 설정 - 사용 - 종료

    스프링 빈 생명주기 : 방법 1. implements InitializingBean, DisposableBean
                        방법 2. 어노테이션 @PostConstruct, @PreDestroy 
    1) 빈 초기화 과정에서 호출 - ctx.refresh();
        public void afterPropertiesSet() throws Exception {
            System.out.println("afterPropertiesSet()");
        }
    
    2) 빈 소멸과정에서 호출 - ctx.close();
        public void destory() throws Exception { 
            System.out.println("destory()");
        }

    3) 빈만 소멸시키기
        컨테이너.destory();

    4) 스프링 빈 범위(scope) : 해당하는 객체가 어디까지 영향을 미치는지 결정
        * 이사람이 설명한거로는 그냥 getBean 두 변수에 하고 두개가 서로 연관 되있는걸 알려줌(같은주소)

    *) implements에 EnvironmentAware하면 환경설정으로 빈이 처음만들어지고 InitializingBean보다 먼저 실행된다.
       

10. 외부파일을 이용한 설정
    Environment 객체 : 외부설정파일을 가져와서 프로퍼티를 추가하거나 추출하는 역할(txt파일같은거) ,데이터베이스의 아이디나 비밀번호를 외부에서 가져와서 프로젝트가 구동되는시점에 사용할때 사용
            context      -     Environment       -      propertySources
                    (ctx.getEnvironment)      (env.getPropertySources)

            추가 : propertySources.addLast
            추출 : env.getProperty
                      
    자바에서 돌아가는 원리) 
        1. 메인 자바
            ConfigurableApplicationContext ctx = new GenericXmlApplicationContext();    // 가장최상위 인터페이스
            ConfigurableEnvironment env = ctx.getEnvironment();                         // 환경설정env는 앱당 하나이다 그래서 
            MutablePropertySources propertySources = env.getPropertySources();          // propertySources를 다 구해온다.

            try{
                propertySources.addLast(new ResourcePropertySource("classpath:admin.properties")); // 추가

                System.out.println(env.getProperty("admin.id"));                                   // 얻을때는 get을 사용해서 얻는다.
                System.out.println(env.getProperty("admin.pw"));
            }catch(IOException e){}

            GenericXmlApplicationContext gCtx = (GenericXmlApplicationContext)ctx;
            gCtx.load("applicationCTX.xml");
            gCtx.refresh();
            
            AdminConnection adminConnection = gCtx.getBean("adminConnection", AdminConnection.class);
            System.out.println("admin ID : " + adminConnection.getAdminId());
            System.out.println("amdin PW : " + adminConnection.getAdminPw());
            
            gCtx.close();
            ctx.close();  

        2. 외부파일 admin.properties
                admin.id=abc
                admin.pw=123

        3. AdminConnection클래스 - 
            public class AdminConnection implements EnvironmentAware, InitializingBean, DisposableBean {        
                private Environment env;
                private String adminId;
                private String adminPw;

                @Override
                public void setEnvironment(Environment env) { //EnvironmentAware로 setEnvironment를 오버라이딩하게된다. (빈 환경설정으로 빈생성시 가장먼저 실행)
                    System.out.println("setEnvironment()");
                    setEnv(env);
                }
                
                public void setEnv(Environment env) {
                    this.env = env;
                }
                
                public void setAdminId(String adminId) {
                    this.adminId = adminId;
                }
                
                public void setAdminPw(String adminPw) {
                    this.adminPw = adminPw;
                }
                
                public String getAdminId() {
                    return adminId;
                }
                
                public String getAdminPw() {
                    return adminPw;
                }
                
                @Override
                public void afterPropertiesSet() throws Exception {
                    System.out.println("afterPropertiesSet()");
                    setAdminId(env.getProperty("admin.id"));        //env는 main에서만 사용했지만 빈생성시기에 env에 값이 들어가있으므로 거기있는 값을가져온다(앱당 하나의 Environment)
                    setAdminPw(env.getProperty("admin.pw"));
                }
            
                @Override
                public void destroy() throws Exception {
                    System.out.println("destroy()");
                }
            
            }        

    
    1) xml 에서 사용시
        xml에서 바로 사용시에는 <context:property-placeholder location="classpath:addmin.properties, classpath:sub_addmin.properties"/>로 가져올 파일들을 선언 - 
        네임스페이스 context추가 - <property name="a">${가져올 파일의 변수이름}</property> 으로 가져와서 쓸수있다.

    2) 어노스테이션 사용시    
        1) 클래스파일
            클래스파일에 어노테이션 사용시 @Configguration, 메소드에 빈을 생성시 @Bean을 붙여준다.
            public static propertySourcesPlaceHolderConfigurer properties(){
                propertySourcesPlaceHolderConfigurer configurer = new propertySourcesPlaceHolderConfigurer()

                Resouce[] location = new Resouce[2];
                location[0] = new ClassPathResource("admin.properties");
                location[1] = new ClassPathResource("sub_admin.properties");
                configurer.setLocation(location);
                return configurer;
            }
            @Value("${sub_amdin.pw}")      // value 어노테이션을 이용하면 바로 값이 들어간다.
            Stirng sub_pw;
        2) 메인파일
            AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(applicationConfig.calss);
            AdminConnection connection = ctx.getBean("빈이름", 클래스파일.class);

    3) 프로파일 속성을 이용한 방법 : 동일한 스프링 빈을 여러개 만들어 놓고 환경에 따라서 적절한 스프링빈을 사용할수 있다. 
                                  개발은 윈도우에서 하고 윈도우를 시스템에서 가져와서 들어있는 단말기면 실행안한다.
        -1 xml : <beans profile="dev"> 속성 추가후 메인에 ctx.getEnvironment().setActiveProfile(config); 하면
                두가지 중에 원하는것만 실행가능
        -2 어노테이션 : 클래스 @Configguration 아래에 @Profile("run") 하고 메인에서 ctx.getEnvironment().setActiveProfile(config);로 해당하는것만 실행가능


참고 : https://m.blog.naver.com/PostView.nhn?blogId=k220j&logNo=220728982289&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F

11. AOP : 프로그래밍을 하다보면 공통적인 기능이 많이 발생한다, 이러한 공통기능을 모든 모듈에 적용하기 위해서 상속도 좋은 방법이지만, 자바에서는 다중상속이 불가능해서 한계가 있고
            기능 구현부분에서 핵심기능코드와 공통기능 코드가 섞여있어서 효율성이 떨어진다.
        - AOP란 : 핵심 기능과 공통기능을 분리 시켜놓고, 공통기능을 필요로하는 핵심기능들에서 사용하는 방식
        - 구현방법 : proxy(대행)를 이용
        - 구현방식)
            1) XML스키마 기반의 AOP구현
                -1 의존설정 (pom.xml) : aspectj,aspectjweaver 받기
                -2 공통기능클래스제작(advice)
                    public class TestAOP {
                        public Object callAOP(ProceedingJoinPoint joinPoint) throws Throwable {
                            String name = joinPoint.getSignature().toShortString();
                            System.out.println(name + "시작");
                            long st = System.currentTimeMillis();
                            
                            try {
                                Object obj = joinPoint.proceed();
                                return obj;
                            }
                            catch(Exception e){
                                e.printStackTrace();
                            }finally {
                                long et=System.currentTimeMillis();
                                System.out.println(name+" 종료 : " + (et - st));
                            }
                            return null;
                        }
                    }
                -3 XML파일설정
                    servlet-context.xml)
                        <beans:bean id="testAOP" class="com.java.test.aop.TestAOP"/>
                        
                        <aop:config>
                            <aop:aspect id="aop" ref="testAOP">
                                <aop:pointcut expression="within(com.java.test.board.*)" id="publicM"/>
                                <aop:around method="callAOP" pointcut-ref="publicM"/>
                            </aop:aspect>
                        </aop:config>
            * 실제코드에 적용하는게아니라 xml설정으로 메소드가 실행되기전에 실행되게 설정함(관점지향)
            2) @Aspect 어노테이션 기반의 AOP구현
                -1 의존설정
                -2 @Aspect 어노테이션을 이용한 Aspect클래스제작
                    @Aspect
                    public class Logapp {
                        @Pointcut("within(com.javalec.ex.*)") //실행할 파일들 설정 
                        private void pointcutMethod(){
                        }

                        @Around("pointcutMethod()")
                        public Object loggerAop(ProceedingJoinPoint joinpoint) throws Throwable {   //조인포인트(핵심기능의 메소드) 가져옴
                            String signatureStr = joinpoint.getSignature().toShortString(); //핵심기능 메소드 이름
                            System.out.println(signatureStr + "is start");
                            long st = System.currentTimeMills();

                            try{
                                Object obj = joinpoint.proceed();  //핵심기능 실행
                                return obj;
                            }finaly{
                                long et = System.currentTimeMills();
                                System.out.println(signatureStr + "is finished");
                                System.out.println(signatureStr + "경과시간 : " + (et-st));
                            }
                        }

                        @Before("within(com.javalec.ex.*)")
                        public void beforAdvice(){
                            System.out.println("beforAdvice()"); 
                        }
                    }                
                -3 서블릿XML파일에 <aop:aspectj-autoproxy/> 설정
                    <aop:aspectj-autoproxy/>
                    <beans:bean id="testAOP" class="com.java.test.aop.TestAOP"/>                

12. MVC : 알던것들
    1) @RequestParam("이름") String 변수이름 : 변수이름에 파라미터이름의 값을 담는다.
    2) 데이터(커맨드)객체 : 컨트롤러에서 커맨드객체만 써주면 파라미터값들이 모듈로 다음페이지로 전송까지 해준다
        public String joindata(Member member);  //Member는 클래스로 각값을 set해줄필요없이 바로 보내줄수있다.
 

13. @RequestMapping파라미터 : RequestMapping에서 요청을 받을때, get방식과 post방식으로 구분가능
    @RequestMapping("/student") // get, post 다받음
    @RequestMapping(method = RequestMapping.GET,value="/student"); // get방식만 받기
    @RequestMapping(method = RequestMapping.POST,value="/student"); // post방식만 받기

14. @ModelAttribute : 커맨드 객체의 이름을 개발자가 변경할수 있다.
        public String joindata(@ModelAttribute("studentinfo") studentInformation studentInformation);     // studentinfo로 사용

15. redirect : 다른페이지로 이동할때 사용

16. 폼데이터 값 검증 : 서버에서 form에서 넘어온 데이터를 검증(제약조건에 대하여), 스프링 서버단에서하는법 (jquery나 자바는 프론트)
    1) Vaildator를 이용한 검증 : 폼에서 전달되는 데이터를 커맨드객체에 담아서 컨트롤객체에 전달 하는데, 이때 커맨드객체에 유횽성 검사를 할수 있다.
                                Vaildator 인터페이스를 사용하는것은 서버에서 검사하는 방법이고 js를 사용하는건 클라이언트에서 검사하는 것이다.
        클라이언트 -> 커맨드 객체 -> 컨트롤러(Vaildator객체(검증 실시)) -> 검증결과 -> 뷰
                                    *검증시 문제발생하면 다시 클라이언트로 백시킨다.
        @RequestMapping("/student")
        public String studentCreate(@ModelAttribute("student") student student, BindingResult result){   // 유효성검사후 결과를 담아주는 객체
            String page = "createDonePage";
            studentValidator validator = new studentValidator();      //에러검사하는 객체를 만들어준다(물론 클래스는 내가만들어야함 &^^)
            validator.validate(student, result);           //커맨드객체와 결과를담을객체를 넘겨준다.
            if(result.hasErrors()){                        //하나라도 에러가걸리면 일로빠짐
                page="createPage";
            }
        }

        **
        validator객체도 만들어야함 (validator클래스는 인터페이스 validator를 받아야한다)
        public boolean support(Class<?> arg0){
            return Student.class.isAssignableFrom(arg0); //검증할 객체의 클래스타입를 넣어준다. (여기서는 Student객체를 유효성검사한다는 의미)
        }
        public void validate(Object obj, Errors errors){
            System.out.println("validate()");
            student student = (Student)obj;
            /* 제약조건 */
            String studentName = student.getName();
            if(studentName == null || studentName.trim().isEmpty()){ //trim메소드를 이용해서 앞뒤를 잘랐는데
                System.out.println("studentName is null or Empty");
                errors.rejectValue("name", "trouble");  //왼쪽 키 오른쪽 value로 넘겨주는거같음
            }
            int studentid = student.getId();
            if(studentid == 0){
                System.out.println("student is 0");
                errors.rejectValue("id","trouble");
            }


            
        }




    2) Validationutils 클래스 : validate() 메소드를 좀더 편리하게 사용되게 고안된 클래스(Vaildator클래스에서 사용)
        ValidationUtils.rejectlfEmptyOrWhitespace(errors,"name","trouble"); //직접만들어서 많이사용하거나 스프링이 제공하는걸 사용, 써서더 불편한경우도 있다.
    3) @Valid @InitBinder : 데이터검증을 위해서 Vaildator 인터페이스를 구현하고 만들고 validate()메소드를 직접호출해서 사용했는데, 이번에는 스프링 프레임워크에서 호출하는 방법이다.
        * hibernate-validator를 pom.xml에 추가해준다.
        * : 커맨드객체 앞에 @Valid를 붙이고 @InitBinder를 붙인 메소드를 만들어준다
        @RequestMapping("/student")
        public String studentCreate(@ModelAttribute("student") @Vaild student student, BindingResult result){   // 유효성검사후 결과를 담아주는 객체
            String page = "createDonePage";
            if(result.hasErrors()){                        //하나라도 에러가걸리면 일로빠짐
                page="createPage";
            }
            return page;
        }
        @InitBinder
        Protected void InitBinder(WebDataBinder binder){
            binder.setValidator(new studentValidator()); //스프링이 자동으로 호출을 해준다.
        }
    