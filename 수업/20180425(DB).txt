데이터베이스 - MariaDB 
mysql제작자가 mysql이 오라클에 인수당하고 나와서 mysql을 보완한 데이터베이스

다운로드 : https://mariadb.com/
자바랑 연결해주는 커넥터 주소 https://downloads.mariadb.org/connector-java/  에서 .jar 파일 다운로드

설치 -----
설치하다보면 패스워드 입력창이 나오는데 선택하는거는 모두체크 한다 
읽어보면 루트계정생성과 utf8로 설정하는거다
그리고 그냥 다음다음하면된다. 
HeidiSQL실행 - 신규 - 암호입력 - 열기
-----------

데이터베이스를 선택안하고 넘어가서 왼쪽에 4개 데이터베이스가 있다
db가보이는데 스키마라고하는것은 마리아db에서 관리하는 영역이라 건들면 문제가 생긴다
mysql은 등록된 유저를 확인할수있다.
많이 사용하는것은 test영역이다.

test에서 우클릭으로 테이블생성은 가능하지만 sql실력 향상을 위해서 쿼리 부분에서 쓸거다.

1. SQL 활용
  1) SQL의 기능 : 생성 읽기 수정 삭제 (CRUD(왼쪽단어들 영어 첫글자))
  2) 회사가서 사용을 자제해야할 기능 : 삭제 (D) -> (U) : 딜리트를 하지않고 업데이트로 접근을 막는다. (지우면 법적으로 처벌을 받을수 있다.)
  3) 가장 많이 사용하는 기능 : 읽기 (R) -> 메인교육
    #튜닝은 읽기위해 사용한다.(직장가서 데이터가 엄청많아서 찾는데 오래걸려는것 아닌이상 하는 의미가없다함  )
  4) 읽기 -> select 질의어 사용
    - 구문 : select 컬럼 form 테이블 where (조건) 
      ㄴ 조건의 종류 : 비교연산자(=,<,>,<=,>=,!=(<>)), 미리 정의된 비교자(like (검색하기위한 방법), in(여러개를 비교하기 위한 방법 - 참), not in (거짓))
      ㄴ group by (묶음) -> having (조건)
      ㄴ order by (정렬) : 정렬방식으로 오름차순 : asc 내림차순 : desc
    
    쿼리문에 select * from user 하고 왼쪽의 mysql을 클릭한다. (클릭안하면 user테이블을 찾지를 못한다.)
          ㄴ select 할때 테이블이 host컬럼 다음에 user컬럼이 나오면 순서대로 쓰는게 속도가 빠르다 
          ㄴ as로 컬럼에 별멍설정가능 select host as f from user
          ㄴ select host as h, user from user order by h desc// h컬럼으로 내림차순 정렬
          ㄴ select host as h, user from user order by 1 desc// 첫번째 컬럼으로 정렬, 2면 두번째 칼럼으로 정렬한다
          ㄴ select * from help_topic where name like 'W%' order by 1, 2 desc // w로 시작하는 단어만 첫번째 칼럼과 두번째 칼럼을 내림차순 정렬, 1이 뒤에있으면 기본값인 asc로 정렬된다 order by 2 desc, 1
          ㄴ select * from help_topic where help_topic_id = 247 // help_topic_id 가 247인것만 찾는다.
          ㄴ select * from help_topic where help_topic_id < 247 // help_topic_id 가 247보다 작은것만 찾는다.
          ㄴ select * from help_topic where help_topic_id != 247 // help_topic_id 가 247만 제외하고 찾는다. <>로 대체가능
          ㄴ select * from help_topic where name like 'A%' // A로 시작하는 문자열 찾기
          ㄴ select * from help_topic where name like 'A_D%' // A로 시작하고 아무문자가 올수있고 D 뒤로는 모두나올수있는 문자열 찾기
          ㄴ select * from help_topic where name like '%d%' // d가 포함되는 모든 문자열 
          ㄴ select * from help_topic where name in ('MONTH','DELETE') // MONTH와 DELETE를 찾는다
          ㄴ select * from help_topic where name not in('month','dlete') and name like 'M%'
          ㄴ select help_category_id from help_topic  group by help_category_id // id로 그룹을 만든다. 컬럼부분에 *이 들어갈수 없다
          ㄴ select help_category_id, count(*) as cnt from help_topic  group by help_category_id // count로 중복을 찾을때 사용할수 있다.
          ㄴ select help_category_id, count(*) as cnt from help_topic  group by help_category_id having count(*) >20 // having으로 20이상만 검색
          ㄴ select help_category_id, count(*) as cnt from help_topic  group by help_category_id having count(*) >20 order by 2 desc

  5) SQL 질의문 -> CRUD
    1) Create <- 생성 (create, insert)
    2) Read <- 읽기 (select)
    3) Update <- 수정 (update)
    4) Delete <- 삭제 (delete, drop, truncate)

  6) Database에서 SQL 질의어를 구분시 : DDL  DML  DCL
     DDL : 데이터베이스 스키마를 정의하는것, create alert drop truncate
     DML : 데이터를 조작 정의하는 것, select insert update delete
     DCL : 데이터를 제어 정의하는것, grant revoke commit rollback
  
    #sql문
    테이블 만들기
      create table user (             
      id varchar(20) not null,      
      pw varchar(8) not null,       
      name varchar(20) null,        
      sex int null,                 
      birthday varchar(8) null,     
      email varchar(50) null,       
      p_number varchar(11)  nulluser
      )                               
      insert into user (id,pw) values ('gdu','1234');             
      select * from user;
      drop table if exists user; #테이블중에 user테이블이있으면 drop을 하라

2. STS에서 mariaDB사용하기
위에서 다운받은 MoiraDB 커넥터를 프로젝트 안쪽으로 옮기고 - 프로젝트 우클릭 설정 - Java Build Path에서  add Jars해준다.
  #JDBC :자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API
 1) 자바에서 MoiraDB에 접속하기
    public static void main(String[] args) {
      System.out.println("DBCon");
      String url = "jdbc:mysql://127.0.0.1:3306/test";
      String user = "root";
      String pwd = "1234";
      Connection con = null;
      try {
        System.out.println("드라이버 클래스 확인");
        Class.forName("org.mariadb.jdbc.Driver"); //패키지이름부터 시작해서 클래스 이름까지
      } catch (Exception e) {
        e.printStackTrace(); // e에 담긴 오류를 콘솔로 출력
      }
      try {
        con = DriverManager.getConnection(url, user, pwd);  // Class.forName으로 제어해주는 메소드이다.
        String sql ="select id from user";
        PreparedStatement ps = con.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();  // 와일문은 레코드가 순서대로 들어온다(레코드 줄대로 정렬되는것같음)
        while (rs.next()) {
          String id = rs.getString("id");
          System.out.println(id);
        }
      } catch (SQLException e) {
        e.printStackTrace();
      }finally {
        try {
          con.close();    // 연결을 종료하는데 문제가 발생할경우 처리해주기위해서 try / catch 문 사용
        } catch (SQLException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
        }
      }
      
      System.out.println("종료");
    }
  # 다들 졸아서 여기까지만하고 내일 모듈화 한다함
3. centOS에서 마리아 디비 설치하기
 1) repo 등록하기 -> vi /etc/yum.repos.d/MariaDB.repo
 2) 등록 내용 (참조) -> https://downloads.mariadb.org/mariadb/repositories/#mirror=ka
    [mariadb]
    name = MariaDB
    baseurl = http://yum.mariadb.org/10.1/centos7-amd64
    gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
    gpgcheck=1
 3) yum설치하기 -> yum install -y MariaDB-server MariaDB-client 
 4) 설치확인 ->  rpm -qa | grep MariaDB
 5) 시스템 재시작 -> init 6
 6) MariaDB 연결 -> mysql -uroot -p1234 (프로그램) (사용자 root) 
 7) 데이터베이스 교체 -> use mysql
 8) 사용자 테이블에 비밀번호 적용하기 ->  update user set password = PASSWORD('1234');
          수정내용 적용하기          ->  flush privileges;
 9) select host, user from user; 테이블에 외부사용자 접근할수있도록 설정(사용자 생성)
      -> host칼럼에 값이 %가 있어야한다. //host에서 접근설정하는듯
      create user 'root'@'%' identified by '1234'; 
      -> 접근 권한 추가
      grant all privileges on *.* to 'root'@'%';
      -> 수정 내용 적용
      flush privileges;
 10) utf-8 설정하기 -> vi /etc/my.cnf에 아래내용으로 다 바꿔준후 centOS 재부팅
   ############################
    [client-server]

    [client]
    default-character-set=utf8

    [mysqld]
    init_connect=SET collation_connection=utf8_general_ci
    init_connect=SET NAMES utf8
    character_set_server=utf8
    collation-server=utf8_general_ci

    [mysqld_safe]

    [mysqldump]
    default-character-set=utf8
    max_allowed_packet=256M

    [mysql]
    default-character-set=utf8

    !includedir /etc/my.cnf.d
   ############################

                     