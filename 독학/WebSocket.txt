WebSocket
채팅구현가능한 기술들 : http://vnthf.logdown.com/posts/2016/03/18/650581
웹소켓 내용 참고 : http://blog.naver.com/PostView.nhn?blogId=scw0531&logNo=221052774287&categoryNo=28&parentCategoryNo=0&viewDate=&currentPage=2&postListTopCurrentPage=&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=2
웹소켓 내용 참고2 : https://shj7242.github.io/2018/01/23/Spring37/
http://niceman.tistory.com/109

Socket 개념
1. Socket이란?
    소켓은 소프트웨어로 작성된 추상적인 개념의 통신접속점이라 할수 있는데,
    네트윅 응용프로그램은 소켓을 통하여 통신망으로 데이터를 송수신하게 된다.
    소켓은 응용프로그램에서 TCP/IP를 이용하는 창구역할을 하며 
    응용프로그램과 소켓사이의 인터페이스 역할을 한다.

2. 소켓의 구조
    클라이언트 어플리케이션은 서버와 통신을 하기위해 어떠한 메시지 또는 데이터를 서버에게 보내려 할 것이다.
    그러하기 위해서는 네트워크에 연결하여 서버에 접속하여야 한다.
    소켓은 이렇게 어플리케이션에게 네트워크 접속을 위한 연결장치, 인터페이스 역할을 하는것이다.
    네트워크 어플리케이션이 보낸데이터를 소켓을 거쳐 운영체제상에 존재하는 TCP/IP소프트웨어에게 전달한다.
    다시 하드웨어 상인(쪽으로) 랜카드를 거쳐 네트워크에 전달하게 된다.
    클라이언트에서 서버 :( 앱 -> 소켓 -> TCP/IP(운영체제) )
    서버의 경우는 정반대이다.
    네트워크는 서버에게 보낸데이터를 서버의 랜카드에게 보내지고, 다시 운영체제의 TCP/IP소프트웨어를 거쳐
    어플리케이션과 연결개념인 소켓을 통해 최종적으로 서버 어플리케이션으로 전달한다.
    서버에서 클라이언트 : ( 서버 -> 랜카드 -> TCP/IP(운영체제) -> 소켓 -> 앱 )
    이렇게 소켓은 어플리케이션과 TCP/IP사이에 존재한다.
    
    네트워크 프로그래밍 == 소켓 프로그래밍

    소켓은 시스템내에 내장 되어 있기 때문에 운영체제에 종속적이다.
    그렇기 때문에 html5, 자바, 윈도우, 리눅스용 소켓 API가 모두 다르지만 개념은 똑같다.

    유닉스, 자바가 API가 많고 윈도우,HTML5는 API가 작다.

*. 포트와 소켓 
    소켓은 어플리케이션에 종속적이다.
    네트워크를 통해 데이터를 주고받고 하려면 소켓을 만들어줘야하고, 한어플리케이션에 여러개의 소켓을 만들 수 있다.
    포트(항구)는 용도에 따라서 미리 정해져있고 따로 막 새로 만들기가 어렵다(포트번호가 용도에따라 저애져있다.)
    소켓은 그냥 만들면됨

    IP Address -> port num -> socket

    소켓을 쓰겠다는것 -> 응용프로그램이 네트워크를 통해 데이터를 주고 받을것이다.

    소켓 : 파일 I/O개념을 네트워크 I/O개념으로 확장 시킨것

*. 시스템 콜이란?
    os내에 있는 함수 호출 -> socket(),bind(),listen()등... 아래에 있는 함수들
    
    전화기 설치 예제)
        1) 전화기를 사야한다.(소켓을 연다 == socket())
        2) 전화기에 전화번호를 할당해야한다 == 소켓에 IP와 Port Num할당(bind())
        3) 전화기에 코드를 꼽아 전화가 오기를 기다린다 == 소켓에 데이터가 오기를 기다린다 (listen())
        4) 전화가 오면 전화를 받는다 == 소켓에서 데이터가 오면 수신한다(accept())
    
    유닉스 소켓 프로그래밍 API)
        socket() -> 소켓열기
        bind() -> 소켓을 만들고나서 서버에게 이런 소켓을 만들었다고 알려줌 (공지)
                ex) 특정메소드에 1을 파라미터로 보내줘야하는데 그걸 따로 말하지 않으면
                    그 메소드를 사용하는데 제한이 있을것이다. 그래서 bind()메소드를 통해서 사용자들에게
                    알려줘야한다.
        listen() -> 데이터가 들어오기를 기다린다.
        accept() -> 데이터를 받아들인다.
        close() -> 소켓 종료

    

WebSocket
1. WebSocket이란?
    Spring스팩의 Web에 속하고, Spring 4.0환경에서 새롭게 등장한 네트워크 서비스
    기존의 HTTP통신은 기본적으로 비연결통신이므로 클라이언트에게 한번 보내고나면 연결이 끊기게 되어 지속적으로 데이터를 주고받을 수 없다.
    이러한 점을 보완하여 좀 더 높은 수준의 즉 Spring 환경에서 손쉽게 사용할수 있도록 API를 만들고 HTTP의 비연결통신을 보완한 기술

2. 특징
    1) HTTP통신의 단점을 갯너
    2) 영구적 양방향 통신(연결이 끊어지지 않고 지속됨)
    3) HTML5의 주요 API
    4) HTTP Protocol을 기반으로 하는 웹 브라우저의 웹 서버간의 양방향 통신을 지원하기 위한 표준
    5) Clint와 Server가 실시간으로 메시지(데이터)를 자유롭게 주고 받을 수 있음

3. 연결방식
    HandShake구조를 따르고 기존 소켓통신의 과정을 따른다.
    socket() -> bind() -> listen() -> accept() -> read() 서비스처리 write() -> finished? -> 종료 or accept()로
    #소켓개설 -> 소켓번호와 소켓주소결합 -> 연결기다림 -> 연결수락 -> 요구처리후 결과전송

4. ... 
    Clint들이 데이터 전달을 위해 서버에 접속할 때 Server의 Socket Handler(Session)에는 Client의 정보가 등록된다
    등록이 되면 서비스를 위해서 여러 함수들을 실행, 브라우저는 단 6개(4개의 이벤트핸들러 + 2개의 일반함수)의 API로 소켓통신이 가능
    
    *. 브라우저 함수 : 라이브러리로 자바스크립트로 구현되어 있다
                      웹 소켓을 이용하면 소켓통신을 보다 효율적으로 구현가능하다.
    1) onopen : 웹 소켓이 열리면 호출
    2) onmessage : 메시지가 도착하면 호출
    3) onerror : 에러가 발생하면 호출
    4) onclose : 웹 소켓이 닫히면 호출
    5) sned : 메시지 전송
    6) close : 웹소켓닫기

5. 환경설정하기
    Spring 4.0기반의 기술이기때문에 버전을 확인해야한다. 

    1. pom.xml : 웹소켓의 사용하기위한 jackson 라이브러리등록 (웹소켓의 데이터통신은 내부적으로 JSON구조도 사용한다.없으면 에러)
        필요한 라이브러리들 
            <!-- WebSocketㅅ -->      
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-websocket</artifactId>
                <version>5.0.7.RELEASE</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>2.9.5</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>2.9.5</version>
            </dependency>		
            <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.9.5</version>
            </dependency>


    2. servlet-context.xml : 
        Namespace영역에서 websocket을 선택하거나
        xmlns:websocket="http://springframework.org/schema/websocket" 추가
        *. 디펜더시 적용후 이클립스 한번 껏다켜야 적용이 정산적으로 된다.
    3. web.xml
    #서블릿 버전별 변경법 :http://mangkyu.tistory.com/12 (2.5를 다 3.0으로 바꿈됨)
        서블릿 버전 3.0이상 적용후 
            <async-supported>true</async-supported> //추가 비동기처리
        </servlet>                                  //이거위에

    4. servlet-context.xml 내용 추가
        <!--  WebSocket -->
        <websocket:handlers>
            <websocket:mapping handler="echoHandelr" path="/echo"/>
            <websocket:sockjs/>
        </websocket:handlers>       

        <beans:bean id="echoHandler" class="com.java.test.EchoHandler"></beans:bean>
    
    5.  echoHandler 클래스 만들기
        1) 해당 경로로 가서 class를 만들고 이름은 위와 같이하고 참조 extends TextWebSocketHandler적용
        2) 소스코드 적기
            package com.java.test;

            import java.util.ArrayList;
            import java.util.List;

            import org.springframework.web.socket.TextMessage;
            import org.springframework.web.socket.WebSocketSession;
            import org.springframework.web.socket.handler.TextWebSocketHandler;

            public class EchoHandler extends TextWebSocketHandler {
                // 전체 채팅 : 웹 소켓 세션을 저장할 리스트 생성
                private List<WebSocketSession> sessionList = new ArrayList<WebSocketSession>();
                
                // 클라이언트와 연결 된 후
                public void afterConnectionEstableished(WebSocketSession session) throws Exception {
                    //맵 사용시
                    //sessions.put(session.getId(), session);
                    //List 사용시
                    sessionList.add(session);
                    //세션값을 불러온
                    //0번째 중괄호에 session.getId()를 넣으라는뜻
                    System.out.println("연결됨"+session.getId());
                    
                    //Session값을 가지고 데이터베이스들의 작업을 하면 채팅 참여 사용자 정보 리스트를 구현하수 있다.
                    System.out.println("채팅방 입장자"+session.getPrincipal().getName());
                }
                
                //웹 소켓 서버로 데이터를 전송했을 경우
                protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
                    //0번재에 session.getId() 1번째에 message.getPayload() 넣음
                    System.out.println("{0}로 부터 {1} 받음".format(session.getId(), message.getPayload()));
                    //logger.info("{}로부터 {}받음", new String[]{session.getId(),message.getPayload()});
                    
                    //연결된 모든 클라이어트에게 메시지 전송 : 리스트 방법
                    //getPrintipal()를 이용해서 세션에 물려있는 유저의 정보를 불러온다. 세션의 정보는 User를 이용한것과 동일하다. //
                    for(WebSocketSession sess : sessionList) {
                        sess.sendMessage(new TextMessage(session.getPrincipal().getName()+"|"+message.getPayload()));
                    }
                    
                    //맵 방법
                    /*
                    Iterator<String> sessionIds = sessions.ketset().iterator();
                    StringsessionId = "";
                    while(sessionIds.hasNext()){
                        sessionId = sessionIds.next();
                        sessions.get(sessionId).sendMessage(new TextMessage("echo:"+message.getPayload)));
                    }
                    */
                    
                    // 연결되어 있는 모든 클라이언트들에게 메시지를 전송한다.
                    // session.sendMessage(new TextMessage("echo:"+message.getPayload()));
                }
                
                // 클라이언트와 연결이 끊어진 경우
                public void afterConnectionclosed(WebSocketSession session) {
                    //List 삭제
                    sessionList.remove(session);
                    
                    //Map 삭제
                    //sessions.remove(session.getId());
                    System.out.println("{0} 연결 끊김".format(session.getId()));
                    System.out.println("채팅방 퇴장자:" + session.getPrincipal().getName());
                }
            }









컨트롤러 만들고잇었슴 // 이거랑 시큐리티까지 하고 적요하면 할려는 기능은 다적용됨(애초에 둘이 붙어있어서 둘다 구현해야함)
*. http://blog.naver.com/PostView.nhn?blogId=scw0531&logNo=221052774287&categoryNo=28&parentCategoryNo=0&viewDate=&currentPage=2&postListTopCurrentPage=&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=2


웹소켓 : http://bokgyu00.blogspot.com/2017/01/spring-websocket.html


실제 구현 1 :http://bokgyu00.blogspot.com/2017/01/spring-websocket.html

서버에게 객체로 보내기위한 참고 : http://cocomo.tistory.com/268?category=679162

대충보기에 잘만들어진 웹소켓 채팅 예제 : https://shj7242.github.io/2018/01/23/Spring37/


이미지 리사이즈 : http://huskdoll.tistory.com/826 (나중에 파일처리할때 사용하기 위해서)


*. 자료보내기
    클라이언트 -> 서버
 		var message = {};
 		message.msg = $("#message").val();
 		message.number = $("#number").val();
 		message.test = "test";
 		$("#data").append(JSON.stringify(message)+"<br/>");        
    
    서버 -> 클라이언트
        JSONObject j = new JSONObject();
        j = JSONObject.fromObject(JSONSerializer.toJSON(map));
        sess.sendMessage(new TextMessage(j.toString()));

   자료받을때 
    클라이언트 -> 서버
		JSONObject jObj = JSONObject.fromObject(message.getPayload());	
		System.out.println("number : "+jObj.get("number"));      
    서버 -> 클라이언트
		var data = (evt.data);
		var jo = JSON.parse(data);

